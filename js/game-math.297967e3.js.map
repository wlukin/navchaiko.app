{"version":3,"file":"js/game-math.297967e3.js","mappings":"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","sources":["webpack://navchaiko/./src/views/games/MathView.vue","webpack://navchaiko/./src/mixins/digitMixin.js","webpack://navchaiko/./src/mixins/mathGameMixin.js","webpack://navchaiko/./src/views/games/MathView.vue?0fc9","webpack://navchaiko/./src/components/ lazy ^\\.\\/.*$ namespace object"],"sourcesContent":["<template>\n    <InputResultGame\n        :inputFlag=\"inputFlag\"\n        :resultFlag=\"resultFlag\"\n        :hintFlag=\"hintFlag\"\n        :timerEnableFlag=\"timerEnableFlag\"\n        :timerRunFlag=\"timerRunFlag\"\n        :resultList=\"round.equation\"\n        :inputList=\"inputList\"\n        :gameId=\"gameId\"\n        :modeId=\"modeId\"\n        :backCategoryId=\"buildCategoryId()\"\n        @clickTileInput=\"inputAddDigit\"\n        @clickTileResult=\"inputRemoveDigit\"\n        @clickControlRefresh=\"refreshRound\"\n        @clickControlNext=\"buildRound\"\n        @clickControlCheck=\"roundCheckResult\"\n        @clickControlHint=\"showHint\"\n        @onTimerBegin=\"onTimerBegin\"\n        @onTimerStart=\"onTimerStart\"\n        @onTimerFinish=\"onTimerFinish\"\n        @onTimerEnd=\"onTimerEnd\"\n    >\n        <template #hint>\n            <Component\n                v-if=\"hintFlag\"\n                :is=\"hintComponent\"\n                :term1=\"round.number.term1\"\n                :term2=\"round.number.term2\"\n                :sign=\"round.sign\"\n            />\n        </template>\n    </InputResultGame>\n</template>\n\n<script>\nimport DomMixin from '@/mixins/domMixin'\nimport DigitMixin from '@/mixins/digitMixin'\nimport mathGameMixin from '@/mixins/mathGameMixin'\nimport tileMixin from '@/mixins/tileMixin'\nimport modeMixin from '@/mixins/modeMixin'\nimport InputResultGame from '@/components/InputResultGame'\nimport { defineAsyncComponent } from \"vue\";\n\nexport default {\n    mixins: [\n        modeMixin,\n        DomMixin,\n        DigitMixin,\n        mathGameMixin,\n        tileMixin,\n    ],\n    components: {\n        InputResultGame,\n    },\n    data() {\n        return {\n            hintFlag: false,\n            timerEnableFlag: false,\n            timerRunFlag: false,\n        }\n    },\n    mounted() {\n        this.buildMode()\n        this.buildRound()\n    },\n    computed: {\n        hintComponent () {\n            const hintBySign = {\n                \"plus\": \"MathExample\",\n                \"minus\": \"MathExample\",\n                \"multiply\": \"MathHintMultiply\",\n                \"division\": \"MathHintMultiply\",\n            }\n            return defineAsyncComponent(() => import(`@/components/${hintBySign[this.round.sign]}`))\n        }  \n    },\n    watch: {\n        resultList: {\n            handler(resultList) {\n                this.round.equation[this.round.input].value = resultList.join('')\n                this.digitListRestrictByMax(this.inputList, parseInt(resultList.join('')), this.mode.result.max)\n                this.inputFlag = resultList.length > 0\n                this.resultFlag = null;\n            },\n            deep: true,\n        }\n    },\n    methods: {\n        buildInputList() {\n            this.inputList = [0,1,2,3,4,5,6,7,8,9].map(digit => this.digitCreate(digit));\n        },\n        buildRound() {\n            this.refreshRound()\n            this.buildInputList()\n            this.buildSign()\n            this.buildSide()\n            this.buildNumbers()\n            this.buildEquation()\n            this.hintFlag = false\n        },\n        refreshRound() {\n            this.resultList = []\n            this.resultFlag = null\n        },\n        buildEquation() {\n            const resultRight = ['multiply', 'plus'].includes(this.round.sign)\n            this.round.input = this.round.side === 'right' ? 'right' : ['left1', 'left2']\n                .sort(() => 0.5 - Math.random())[0]\n            const equation = {\n                left1: this.tileCreate('left1', resultRight ? this.round.number.term1 : this.round.number.result),\n                sign: this.tileCreate('sign', this.display.sign[this.round.sign]),\n                left2: this.tileCreate('left2', this.round.number.term2),\n                equal: this.tileCreate('equal', '='),\n                right: this.tileCreate('right', resultRight ? this.round.number.result : this.round.number.term1),\n            }\n            this.assertResult = equation[this.round.input].value\n            equation[this.round.input].value = null\n            this.round.equation = equation\n        },\n        inputAddDigit(digit) {\n            if (this.digitIsDisabled(digit)) return;\n            this.resultList.push(digit.value);\n            \n        },\n        inputRemoveDigit(digit) {\n            if (this.resultFlag !== true && this.round.input === digit.id && this.resultList.length > 0) {\n                this.resultList.pop()\n            }\n        },\n        roundCheckResult() {\n            if (this.resultList.length > 0) {\n                this.resultFlag = this.resultList.join('') === '' + this.assertResult\n            }\n            this.inputFlag = false\n        },\n        showHint() {\n            this.hintFlag = !this.hintFlag\n        },\n        onTimerBegin() {\n            this.timerEnableFlag = true\n        },\n        onTimerStart() {\n            this.timerRunFlag = true\n            this.buildRound()\n        },\n        onTimerFinish() {\n            this.timerRunFlag = false\n        },\n        onTimerEnd() {\n            this.timerEnableFlag = false\n            this.buildRound()\n        },\n    },\n}\n</script>","export default {\n    methods: {\n        digitCreate(value, disabled = false) {\n            return {\n                id: value,\n                value: value,\n                disabled: disabled,\n                class: {\n                    disabled: disabled,\n                }\n            }\n        },\n        digitSetDisabled(digit, disabled) {\n            digit.disabled = disabled\n            digit.class.disabled = disabled\n            return digit\n        },\n        digitIsDisabled(digit) {\n            return digit.disabled;\n        },\n        digitListRestrictByMax(digitList, number, maxNumber) {\n            digitList.forEach(digit => this.digitSetDisabled(digit, '' + number === '0' || parseInt('' + number + digit.value) > parseInt(maxNumber)))\n        },\n    }\n}","export default {\n    data() {\n        return {\n            mode: {\n                sign: {\n                    plus: true,\n                    minus: true,\n                    multiply: false,\n                    division: false,\n                },\n                side: {\n                    right: true,\n                    left: false,\n                },\n                minSum: 0,\n                maxSum: 20,\n                minTerm: 0,\n                maxOneTerm: 20,\n                simplerOrder: null,\n            },\n            history: {\n                lengthMax: 100,\n                list: [],\n            },\n            round: {\n                sign: null,\n                side: null,\n                input: null,\n                number: {\n                    sum: null,\n                    term1: null,\n                    term2: null,\n                },\n                equation: {},\n            },\n            display: {\n                sign: {\n                    plus: '+',\n                    minus: '-',\n                    multiply: '\\u{00D7}',\n                    division: '\\u{00F7}',\n                }\n            },\n            assertResult: null,\n            resultFlag: null,\n            inputFlag: false,\n            resultList: [],\n            inputList: [],\n        }\n    },\n    watch: {\n        // resultFlag() {\n        //     if (this.resultFlag === true) {\n        //         this.hintFlag = true\n        //     }\n        // }\n    },\n    methods: {\n        historyPack(term1, term2) {\n            return [\n                Math.max(term1, term2),\n                this.display.sign[this.round.sign],\n                Math.min(term1, term2),\n            ].join('')\n        },\n        historyCheck(term1, term2) {\n            return this.history.list.indexOf(this.historyPack(term1, term2)) === -1\n        },\n        historyAdd(term1, term2) {\n            this.history.list.push(this.historyPack(term1, term2))\n\n            if (this.history.list.length > this.history.lengthMax) {\n                this.historyCut(this.history.lengthMax)\n            }\n        },\n        historyCut(size) {\n            this.history.list.splice(0, this.history.list.length - size)\n        },\n        buildSign() {\n            this.round.sign = Object.entries(this.mode.sign)\n            .filter(e => !!e[1])\n            .map(e => e[0])\n            .sort(() => 0.5 - Math.random())[0]\n        },\n        buildSide() {\n            this.round.side = Object.entries(this.mode.side)\n            .filter(e => !!e[1])\n            .map(e => e[0])\n            .sort(() => 0.5 - Math.random())[0]\n        },\n        buildNumbers() {\n            const signMulti = ['multiply', 'division'].includes(this.round.sign)\n            const processingMax = 1000;\n            let term1, term2, processingCounter = 0;\n\n            this.mode.result ??= {}\n            this.mode.result.min ??= 1\n            this.mode.result.max ??= 100\n\n            this.mode.term1 ??= {}\n            this.mode.term1.min ??= 1\n            this.mode.term1.max ??= this.mode.result.max\n\n            this.mode.term2 ??= {}\n            this.mode.term2.min ??= 1\n            this.mode.term2.max ??= this.mode.result.max\n            \n            while (processingCounter <= processingMax*2) {\n\n                term1 = Math.floor(Math.random() * (this.mode.term1.max - this.mode.term1.min + 1)) + this.mode.term1.min\n                term2 = Math.floor(Math.random() * (this.mode.term2.max - this.mode.term2.min + 1)) + this.mode.term2.min\n                if ((signMulti ? (term1 * term2) : (term1 + term2)) > this.mode.result.max) continue\n                if ((signMulti ? (term1 * term2) : (term1 + term2)) < this.mode.result.min) continue\n\n                processingCounter++;\n\n                if (this.historyCheck(term1, term2)) break\n\n                if (processingCounter == processingMax) {\n                    this.historyCut(1)\n                }\n\n                if (processingCounter === processingMax*2-1 ) {\n                    term1 = term2 = 1\n                    break\n                }\n            } \n\n            this.historyAdd(term1, term2);\n            \n            if (this.mode.shuffle) {\n                [term1, term2] = [term1, term2].sort(() => 0.5 - Math.random())\n            }\n            \n            this.round.number.term1 = this.mode.simplerOrder === true ? Math.max(term1, term2) : term1\n            this.round.number.term2 = this.mode.simplerOrder === true ? Math.min(term1, term2) : term2\n            this.round.number.result = signMulti ? term1 * term2 : term1 + term2\n        },\n        // buildNumbers22() {\n        //     const processingMax = 100;\n        //     let term1, term2, processingCounter = 0;\n            \n        //     while (processingCounter < processingMax) {\n\n        //         term1 = Math.floor(Math.random() * ((this.mode.maxOneTerm ?? this.mode.maxSum) - (this.mode.minTerm ?? 0) + 1)) + (this.mode.minTerm ?? 0)\n        //         term2 = Math.floor(Math.random() * (this.mode.maxSum - (this.mode.minTerm ?? 0) + 1)) + (this.mode.minTerm ?? 0)\n        //         if ((term1 + term2) > this.mode.maxSum) continue\n        //         if ((term1 + term2) < (this.mode.minSum ?? 0)) continue\n\n        //         processingCounter++;\n\n        //         if (this.historyCheck(term1, term2)) break\n\n        //         if (processingCounter == processingMax - 1) {\n        //             this.historyCut(1)\n        //         }\n        //     } \n\n        //     this.historyAdd(term1, term2);\n            \n        //     // shuffle terms for fix maxOneTerm limitation only for term1\n        //     [term1, term2] = [term1, term2].sort(() => 0.5 - Math.random())\n\n        //     if (this.mode.simplerOrder === true && term1 < term2) {\n        //         this.round.number.term1 = term2\n        //         this.round.number.term2 = term1\n        //     } else {\n        //         this.round.number.term1 = term1\n        //         this.round.number.term2 = term2\n        //     }\n        //     this.round.number.sum = term1 + term2\n        // },\n    },\n}","import { render } from \"./MathView.vue?vue&type=template&id=50a1b618\"\nimport script from \"./MathView.vue?vue&type=script&lang=js\"\nexport * from \"./MathView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/app/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","var map = {\n\t\"./ControlsPanelBase\": [\n\t\t7447\n\t],\n\t\"./ControlsPanelBase.vue\": [\n\t\t7447\n\t],\n\t\"./ControlsPanelButton\": [\n\t\t3197\n\t],\n\t\"./ControlsPanelButton.vue\": [\n\t\t3197\n\t],\n\t\"./CurrentProfile\": [\n\t\t7506\n\t],\n\t\"./CurrentProfile.vue\": [\n\t\t7506\n\t],\n\t\"./DigitInput\": [\n\t\t3274,\n\t\t274\n\t],\n\t\"./DigitInput.vue\": [\n\t\t3274,\n\t\t274\n\t],\n\t\"./InputResultGame\": [\n\t\t9450\n\t],\n\t\"./InputResultGame.vue\": [\n\t\t9450\n\t],\n\t\"./MathExample\": [\n\t\t3747,\n\t\t747\n\t],\n\t\"./MathExample.vue\": [\n\t\t3747,\n\t\t747\n\t],\n\t\"./MathHintMultiply\": [\n\t\t3381,\n\t\t381\n\t],\n\t\"./MathHintMultiply.vue\": [\n\t\t3381,\n\t\t381\n\t],\n\t\"./StopWatch\": [\n\t\t1158\n\t],\n\t\"./StopWatch.vue\": [\n\t\t1158\n\t],\n\t\"./TileItem\": [\n\t\t2583\n\t],\n\t\"./TileItem.vue\": [\n\t\t2583\n\t],\n\t\"./TileList\": [\n\t\t7728\n\t],\n\t\"./TileList.vue\": [\n\t\t7728\n\t],\n\t\"./TitleAnimated\": [\n\t\t7261\n\t],\n\t\"./TitleAnimated.vue\": [\n\t\t7261\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 1413;\nmodule.exports = webpackAsyncContext;"],"names":["_createBlock","_component_InputResultGame","inputFlag","_ctx","resultFlag","hintFlag","$data","timerEnableFlag","timerRunFlag","resultList","round","equation","inputList","gameId","modeId","backCategoryId","buildCategoryId","onClickTileInput","$options","inputAddDigit","onClickTileResult","inputRemoveDigit","onClickControlRefresh","refreshRound","onClickControlNext","buildRound","onClickControlCheck","roundCheckResult","onClickControlHint","showHint","onOnTimerBegin","onTimerBegin","onOnTimerStart","onTimerStart","onOnTimerFinish","onTimerFinish","onOnTimerEnd","onTimerEnd","hint","_withCtx","_resolveDynamicComponent","hintComponent","term1","number","term2","sign","methods","digitCreate","value","disabled","id","class","digitSetDisabled","digit","digitIsDisabled","digitListRestrictByMax","digitList","maxNumber","forEach","this","parseInt","data","mode","plus","minus","multiply","division","side","right","left","minSum","maxSum","minTerm","maxOneTerm","simplerOrder","history","lengthMax","list","input","sum","display","assertResult","watch","historyPack","Math","max","min","join","historyCheck","indexOf","historyAdd","push","length","historyCut","size","splice","buildSign","Object","entries","filter","e","map","sort","random","buildSide","buildNumbers","signMulti","includes","processingMax","processingCounter","result","floor","shuffle","mixins","modeMixin","DomMixin","DigitMixin","mathGameMixin","tileMixin","components","InputResultGame","mounted","buildMode","computed","hintBySign","defineAsyncComponent","handler","deep","buildInputList","buildEquation","resultRight","left1","tileCreate","left2","equal","pop","__exports__","render","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","all","slice","keys","module","exports"],"sourceRoot":""}